/**
 * BaCS API
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
  HttpContext,
} from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

// @ts-ignore
import { CreateLocationRequest } from '../models/createLocationRequest';
// @ts-ignore
import { LocationDto } from '../models/locationDto';
// @ts-ignore
import { LocationDtoPaginatedResponse } from '../models/locationDtoPaginatedResponse';
// @ts-ignore
import { ProblemDetails } from '../models/problemDetails';
// @ts-ignore
import { UpdateLocationRequest } from '../models/updateLocationRequest';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { BaseService } from '../api.base.service';

@Injectable({
  providedIn: 'root',
})
export class LocationsService extends BaseService {
  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string | string[],
    @Optional() configuration?: Configuration,
  ) {
    super(basePath, configuration);
  }

  /**
   * Получить список локаций.
   * @param ids Фильтр по ID резерваций.
   * @param offset
   * @param limit
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public locationsGet(
    ids?: Array<string>,
    offset?: number,
    limit?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<LocationDtoPaginatedResponse>;
  public locationsGet(
    ids?: Array<string>,
    offset?: number,
    limit?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<LocationDtoPaginatedResponse>>;
  public locationsGet(
    ids?: Array<string>,
    offset?: number,
    limit?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<LocationDtoPaginatedResponse>>;
  public locationsGet(
    ids?: Array<string>,
    offset?: number,
    limit?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (ids) {
      ids.forEach((element) => {
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>element, 'ids');
      });
    }
    localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>offset, 'offset');
    localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>limit, 'limit');

    let localVarHeaders = this.defaultHeaders;

    // authentication (Keycloak) required
    localVarHeaders = this.configuration.addCredentialToHeaders(
      'Keycloak',
      'Authorization',
      localVarHeaders,
      'Bearer ',
    );

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ??
      this.configuration.selectHeaderAccept(['application/json', 'application/problem+json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/locations`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<LocationDtoPaginatedResponse>('get', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * Удалить администратора локации.
   * @param locationId ID локации.
   * @param userId ID пользователя.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public locationsLocationIdAdminsUserIdDelete(
    locationId: string,
    userId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/problem+json'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any>;
  public locationsLocationIdAdminsUserIdDelete(
    locationId: string,
    userId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/problem+json'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpResponse<any>>;
  public locationsLocationIdAdminsUserIdDelete(
    locationId: string,
    userId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/problem+json'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpEvent<any>>;
  public locationsLocationIdAdminsUserIdDelete(
    locationId: string,
    userId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/problem+json'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any> {
    if (locationId === null || locationId === undefined) {
      throw new Error(
        'Required parameter locationId was null or undefined when calling locationsLocationIdAdminsUserIdDelete.',
      );
    }
    if (userId === null || userId === undefined) {
      throw new Error(
        'Required parameter userId was null or undefined when calling locationsLocationIdAdminsUserIdDelete.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    // authentication (Keycloak) required
    localVarHeaders = this.configuration.addCredentialToHeaders(
      'Keycloak',
      'Authorization',
      localVarHeaders,
      'Bearer ',
    );

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/problem+json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/locations/${this.configuration.encodeParam({ name: 'locationId', value: locationId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: 'uuid' })}/admins/${this.configuration.encodeParam({ name: 'userId', value: userId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: 'uuid' })}`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<any>('delete', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * Добавить администратора локации.
   * @param locationId ID локации.
   * @param userId ID пользователя.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public locationsLocationIdAdminsUserIdPut(
    locationId: string,
    userId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/problem+json'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any>;
  public locationsLocationIdAdminsUserIdPut(
    locationId: string,
    userId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/problem+json'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpResponse<any>>;
  public locationsLocationIdAdminsUserIdPut(
    locationId: string,
    userId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/problem+json'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpEvent<any>>;
  public locationsLocationIdAdminsUserIdPut(
    locationId: string,
    userId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/problem+json'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any> {
    if (locationId === null || locationId === undefined) {
      throw new Error(
        'Required parameter locationId was null or undefined when calling locationsLocationIdAdminsUserIdPut.',
      );
    }
    if (userId === null || userId === undefined) {
      throw new Error(
        'Required parameter userId was null or undefined when calling locationsLocationIdAdminsUserIdPut.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    // authentication (Keycloak) required
    localVarHeaders = this.configuration.addCredentialToHeaders(
      'Keycloak',
      'Authorization',
      localVarHeaders,
      'Bearer ',
    );

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/problem+json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/locations/${this.configuration.encodeParam({ name: 'locationId', value: locationId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: 'uuid' })}/admins/${this.configuration.encodeParam({ name: 'userId', value: userId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: 'uuid' })}`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<any>('put', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * Удалить локацию.
   * @param locationId ID локации.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public locationsLocationIdDelete(
    locationId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/problem+json'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any>;
  public locationsLocationIdDelete(
    locationId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/problem+json'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpResponse<any>>;
  public locationsLocationIdDelete(
    locationId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/problem+json'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpEvent<any>>;
  public locationsLocationIdDelete(
    locationId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/problem+json'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any> {
    if (locationId === null || locationId === undefined) {
      throw new Error('Required parameter locationId was null or undefined when calling locationsLocationIdDelete.');
    }

    let localVarHeaders = this.defaultHeaders;

    // authentication (Keycloak) required
    localVarHeaders = this.configuration.addCredentialToHeaders(
      'Keycloak',
      'Authorization',
      localVarHeaders,
      'Bearer ',
    );

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/problem+json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/locations/${this.configuration.encodeParam({ name: 'locationId', value: locationId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: 'uuid' })}`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<any>('delete', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * Получить локацию по ID.
   * @param locationId ID локации.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public locationsLocationIdGet(
    locationId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<LocationDto>;
  public locationsLocationIdGet(
    locationId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<LocationDto>>;
  public locationsLocationIdGet(
    locationId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<LocationDto>>;
  public locationsLocationIdGet(
    locationId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (locationId === null || locationId === undefined) {
      throw new Error('Required parameter locationId was null or undefined when calling locationsLocationIdGet.');
    }

    let localVarHeaders = this.defaultHeaders;

    // authentication (Keycloak) required
    localVarHeaders = this.configuration.addCredentialToHeaders(
      'Keycloak',
      'Authorization',
      localVarHeaders,
      'Bearer ',
    );

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ??
      this.configuration.selectHeaderAccept(['application/json', 'application/problem+json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/locations/${this.configuration.encodeParam({ name: 'locationId', value: locationId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: 'uuid' })}`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<LocationDto>('get', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * Удалить фотографию локации.
   * @param locationId ID локации.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public locationsLocationIdImageDelete(
    locationId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/problem+json'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any>;
  public locationsLocationIdImageDelete(
    locationId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/problem+json'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpResponse<any>>;
  public locationsLocationIdImageDelete(
    locationId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/problem+json'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpEvent<any>>;
  public locationsLocationIdImageDelete(
    locationId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/problem+json'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any> {
    if (locationId === null || locationId === undefined) {
      throw new Error(
        'Required parameter locationId was null or undefined when calling locationsLocationIdImageDelete.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    // authentication (Keycloak) required
    localVarHeaders = this.configuration.addCredentialToHeaders(
      'Keycloak',
      'Authorization',
      localVarHeaders,
      'Bearer ',
    );

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/problem+json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/locations/${this.configuration.encodeParam({ name: 'locationId', value: locationId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: 'uuid' })}/image`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<any>('delete', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * Загрузить фотографию локации.
   * @param locationId ID локации.
   * @param file Фотография локации.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public locationsLocationIdImagePut(
    locationId: string,
    file?: Blob,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<string>;
  public locationsLocationIdImagePut(
    locationId: string,
    file?: Blob,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<string>>;
  public locationsLocationIdImagePut(
    locationId: string,
    file?: Blob,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<string>>;
  public locationsLocationIdImagePut(
    locationId: string,
    file?: Blob,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (locationId === null || locationId === undefined) {
      throw new Error('Required parameter locationId was null or undefined when calling locationsLocationIdImagePut.');
    }

    let localVarHeaders = this.defaultHeaders;

    // authentication (Keycloak) required
    localVarHeaders = this.configuration.addCredentialToHeaders(
      'Keycloak',
      'Authorization',
      localVarHeaders,
      'Bearer ',
    );

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ??
      this.configuration.selectHeaderAccept(['application/json', 'application/problem+json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    // to determine the Content-Type header
    const consumes: string[] = ['multipart/form-data'];

    const canConsumeForm = this.canConsumeForm(consumes);

    let localVarFormParams: { append(param: string, value: any): any };
    let localVarUseForm = false;
    let localVarConvertFormParamsToString = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
    localVarUseForm = canConsumeForm;
    if (localVarUseForm) {
      localVarFormParams = new FormData();
    } else {
      localVarFormParams = new HttpParams({ encoder: this.encoder });
    }

    if (file !== undefined) {
      localVarFormParams = (localVarFormParams.append('file', <any>file) as any) || localVarFormParams;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/locations/${this.configuration.encodeParam({ name: 'locationId', value: locationId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: 'uuid' })}/image`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<string>('put', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * Обновить локацию.
   * @param locationId ID локации.
   * @param updateLocationRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public locationsLocationIdPut(
    locationId: string,
    updateLocationRequest?: UpdateLocationRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<LocationDto>;
  public locationsLocationIdPut(
    locationId: string,
    updateLocationRequest?: UpdateLocationRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<LocationDto>>;
  public locationsLocationIdPut(
    locationId: string,
    updateLocationRequest?: UpdateLocationRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<LocationDto>>;
  public locationsLocationIdPut(
    locationId: string,
    updateLocationRequest?: UpdateLocationRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (locationId === null || locationId === undefined) {
      throw new Error('Required parameter locationId was null or undefined when calling locationsLocationIdPut.');
    }

    let localVarHeaders = this.defaultHeaders;

    // authentication (Keycloak) required
    localVarHeaders = this.configuration.addCredentialToHeaders(
      'Keycloak',
      'Authorization',
      localVarHeaders,
      'Bearer ',
    );

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ??
      this.configuration.selectHeaderAccept(['application/json', 'application/problem+json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/locations/${this.configuration.encodeParam({ name: 'locationId', value: locationId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: 'uuid' })}`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<LocationDto>('put', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: updateLocationRequest,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * Создать локацию.
   * @param createLocationRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public locationsPost(
    createLocationRequest?: CreateLocationRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<LocationDto>;
  public locationsPost(
    createLocationRequest?: CreateLocationRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<LocationDto>>;
  public locationsPost(
    createLocationRequest?: CreateLocationRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<LocationDto>>;
  public locationsPost(
    createLocationRequest?: CreateLocationRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    // authentication (Keycloak) required
    localVarHeaders = this.configuration.addCredentialToHeaders(
      'Keycloak',
      'Authorization',
      localVarHeaders,
      'Bearer ',
    );

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ??
      this.configuration.selectHeaderAccept(['application/json', 'application/problem+json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/locations`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<LocationDto>('post', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: createLocationRequest,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }
}
