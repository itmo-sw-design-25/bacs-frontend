/**
 * BaCS API
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
  HttpContext,
} from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

// @ts-ignore
import { CreateReservationRequest } from '../models/createReservationRequest';
// @ts-ignore
import { ProblemDetails } from '../models/problemDetails';
// @ts-ignore
import { ReservationDto } from '../models/reservationDto';
// @ts-ignore
import { ReservationDtoPaginatedResponse } from '../models/reservationDtoPaginatedResponse';
// @ts-ignore
import { ReservationStatus } from '../models/reservationStatus';
// @ts-ignore
import { UpdateReservationRequest } from '../models/updateReservationRequest';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { BaseService } from '../api.base.service';

@Injectable({
  providedIn: 'root',
})
export class ReservationsService extends BaseService {
  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string | string[],
    @Optional() configuration?: Configuration,
  ) {
    super(basePath, configuration);
  }

  /**
   * Получить список резерваций.
   * @param ids Фильтр по ID резерваций.
   * @param userIds Фильтр по ID пользователей.
   * @param locationIds Фильтр по ID локаций.
   * @param resourceIds Фильтр по ID ресурсов.
   * @param statuses Фильтр по статусам резерваций.
   * @param afterDate Фильтр по времени начала бронирования (включительно).
   * @param beforeDate Фильтр по времени окончания бронирования (включительно).
   * @param offset
   * @param limit
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public reservationsGet(
    ids?: Array<string>,
    userIds?: Array<string>,
    locationIds?: Array<string>,
    resourceIds?: Array<string>,
    statuses?: Array<ReservationStatus>,
    afterDate?: string,
    beforeDate?: string,
    offset?: number,
    limit?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<ReservationDtoPaginatedResponse>;
  public reservationsGet(
    ids?: Array<string>,
    userIds?: Array<string>,
    locationIds?: Array<string>,
    resourceIds?: Array<string>,
    statuses?: Array<ReservationStatus>,
    afterDate?: string,
    beforeDate?: string,
    offset?: number,
    limit?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<ReservationDtoPaginatedResponse>>;
  public reservationsGet(
    ids?: Array<string>,
    userIds?: Array<string>,
    locationIds?: Array<string>,
    resourceIds?: Array<string>,
    statuses?: Array<ReservationStatus>,
    afterDate?: string,
    beforeDate?: string,
    offset?: number,
    limit?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<ReservationDtoPaginatedResponse>>;
  public reservationsGet(
    ids?: Array<string>,
    userIds?: Array<string>,
    locationIds?: Array<string>,
    resourceIds?: Array<string>,
    statuses?: Array<ReservationStatus>,
    afterDate?: string,
    beforeDate?: string,
    offset?: number,
    limit?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (ids) {
      ids.forEach((element) => {
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>element, 'ids');
      });
    }
    if (userIds) {
      userIds.forEach((element) => {
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>element, 'userIds');
      });
    }
    if (locationIds) {
      locationIds.forEach((element) => {
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>element, 'locationIds');
      });
    }
    if (resourceIds) {
      resourceIds.forEach((element) => {
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>element, 'resourceIds');
      });
    }
    if (statuses) {
      statuses.forEach((element) => {
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>element, 'statuses');
      });
    }
    localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>afterDate, 'afterDate');
    localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>beforeDate, 'beforeDate');
    localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>offset, 'offset');
    localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>limit, 'limit');

    let localVarHeaders = this.defaultHeaders;

    // authentication (Keycloak) required
    localVarHeaders = this.configuration.addCredentialToHeaders(
      'Keycloak',
      'Authorization',
      localVarHeaders,
      'Bearer ',
    );

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ??
      this.configuration.selectHeaderAccept(['application/json', 'application/problem+json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/reservations`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<ReservationDtoPaginatedResponse>('get', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * Создать резервацию.
   * @param createReservationRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public reservationsPost(
    createReservationRequest?: CreateReservationRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<ReservationDto>;
  public reservationsPost(
    createReservationRequest?: CreateReservationRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<ReservationDto>>;
  public reservationsPost(
    createReservationRequest?: CreateReservationRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<ReservationDto>>;
  public reservationsPost(
    createReservationRequest?: CreateReservationRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    // authentication (Keycloak) required
    localVarHeaders = this.configuration.addCredentialToHeaders(
      'Keycloak',
      'Authorization',
      localVarHeaders,
      'Bearer ',
    );

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ??
      this.configuration.selectHeaderAccept(['application/json', 'application/problem+json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/reservations`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<ReservationDto>('post', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: createReservationRequest,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * Отменить резервацию.
   * @param reservationId ID резервации.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public reservationsReservationIdCancelPut(
    reservationId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/problem+json'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any>;
  public reservationsReservationIdCancelPut(
    reservationId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/problem+json'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpResponse<any>>;
  public reservationsReservationIdCancelPut(
    reservationId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/problem+json'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpEvent<any>>;
  public reservationsReservationIdCancelPut(
    reservationId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/problem+json'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any> {
    if (reservationId === null || reservationId === undefined) {
      throw new Error(
        'Required parameter reservationId was null or undefined when calling reservationsReservationIdCancelPut.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    // authentication (Keycloak) required
    localVarHeaders = this.configuration.addCredentialToHeaders(
      'Keycloak',
      'Authorization',
      localVarHeaders,
      'Bearer ',
    );

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/problem+json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/reservations/${this.configuration.encodeParam({ name: 'reservationId', value: reservationId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: 'uuid' })}/Cancel`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<any>('put', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * Получить резервацию по ID.
   * @param reservationId ID резервации.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public reservationsReservationIdGet(
    reservationId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<ReservationDto>;
  public reservationsReservationIdGet(
    reservationId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<ReservationDto>>;
  public reservationsReservationIdGet(
    reservationId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<ReservationDto>>;
  public reservationsReservationIdGet(
    reservationId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (reservationId === null || reservationId === undefined) {
      throw new Error(
        'Required parameter reservationId was null or undefined when calling reservationsReservationIdGet.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    // authentication (Keycloak) required
    localVarHeaders = this.configuration.addCredentialToHeaders(
      'Keycloak',
      'Authorization',
      localVarHeaders,
      'Bearer ',
    );

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ??
      this.configuration.selectHeaderAccept(['application/json', 'application/problem+json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/reservations/${this.configuration.encodeParam({ name: 'reservationId', value: reservationId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: 'uuid' })}`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<ReservationDto>('get', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * Обновить резервацию.
   * @param reservationId ID резервации.
   * @param updateReservationRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public reservationsReservationIdPut(
    reservationId: string,
    updateReservationRequest?: UpdateReservationRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<ReservationDto>;
  public reservationsReservationIdPut(
    reservationId: string,
    updateReservationRequest?: UpdateReservationRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<ReservationDto>>;
  public reservationsReservationIdPut(
    reservationId: string,
    updateReservationRequest?: UpdateReservationRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<ReservationDto>>;
  public reservationsReservationIdPut(
    reservationId: string,
    updateReservationRequest?: UpdateReservationRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (reservationId === null || reservationId === undefined) {
      throw new Error(
        'Required parameter reservationId was null or undefined when calling reservationsReservationIdPut.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    // authentication (Keycloak) required
    localVarHeaders = this.configuration.addCredentialToHeaders(
      'Keycloak',
      'Authorization',
      localVarHeaders,
      'Bearer ',
    );

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ??
      this.configuration.selectHeaderAccept(['application/json', 'application/problem+json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/reservations/${this.configuration.encodeParam({ name: 'reservationId', value: reservationId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: 'uuid' })}`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<ReservationDto>('put', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      body: updateReservationRequest,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }
}
